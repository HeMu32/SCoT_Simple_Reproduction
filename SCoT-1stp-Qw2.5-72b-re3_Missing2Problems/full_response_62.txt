[BEGIN PROCESS]
Input: xs: a list of numbers
Output: smallest: the smallest number in the list
1: Check if the list is empty, if it is, return None or raise an error (since there is no smallest number in an empty list)
2: Initialize smallest with the first element of the list
3: Loop through the list starting from the second element
4: For each element, if it is smaller than the current smallest, update smallest
5: After the loop, return the smallest number
[END PROCESS]

[BEGIN CODE]
def smallest_num(xs):
    if not xs:  # Check if the list is empty
        return None  # or raise an error: raise ValueError("List is empty")
    
    smallest = xs[0]  # Initialize smallest with the first element of the list
    for num in xs[1:]:  # Loop through the list starting from the second element
        if num < smallest:  # If the current element is smaller than the current smallest
            smallest = num  # Update smallest
    return smallest  # Return the smallest number
[END CODE]

### Explanation:
The function `smallest_num` is designed to find the smallest number in a given list `xs`. The process starts by checking if the list is empty. If it is, the function returns `None` (or you could choose to raise an error, depending on the use case). If the list is not empty, the function initializes the variable `smallest` with the first element of the list. It then iterates over the rest of the list, comparing each element to the current `smallest` value. If a smaller element is found, `smallest` is updated. After the loop completes, the function returns the smallest number found in the list. This approach ensures that the function correctly identifies the smallest number in the list, even if the list contains negative numbers or is very large.