[-BEGIN PROCESS]
Input: A: a list of integers
Output: is_monotonic: a boolean value indicating whether the list is monotonic (either entirely non-increasing or non-decreasing)

1: Check if the list is empty or contains only one element, in which case it is considered monotonic.
2: Initialize two flags, `increasing` and `decreasing`, to True.
3: Iterate through the list from the second element to the last.
4:     If the current element is greater than the previous element, set `decreasing` to False.
5:     If the current element is less than the previous element, set `increasing` to False.
6:     If both `increasing` and `decreasing` are False, break the loop as the list is not monotonic.
7: Return the logical OR of `increasing` and `decreasing` to determine if the list is monotonic.
[END PROCESS]

[-BEGIN CODE]
def is_Monotonic(A):
    # Check for empty list or single element list
    if len(A) <= 1:
        return True

    # Initialize flags
    increasing = True
    decreasing = True

    # Iterate through the list to check monotonicity
    for i in range(1, len(A)):
        if A[i] > A[i - 1]:
            decreasing = False
        if A[i] < A[i - 1]:
            increasing = False
        if not increasing and not decreasing:
            break

    # Return whether the list is monotonic
    return increasing or decreasing
[END CODE]

### Explanation:
The function `is_Monotonic` checks if a given list `A` is monotonic. A list is considered monotonic if it is either entirely non-increasing or non-decreasing. The function works as follows:

1. **Edge Case Handling**: If the list is empty or contains only one element, it is trivially monotonic, so the function returns `True`.

2. **Initialization**: Two boolean flags, `increasing` and `decreasing`, are initialized to `True`. These flags will help determine if the list is non-decreasing or non-increasing, respectively.

3. **Iteration**: The function iterates through the list starting from the second element. For each element, it compares it with the previous element:
   - If the current element is greater than the previous one, the list cannot be non-increasing, so `decreasing` is set to `False`.
   - If the current element is less than the previous one, the list cannot be non-decreasing, so `increasing` is set to `False`.
   - If both `increasing` and `decreasing` are `False`, the loop breaks early as the list is not monotonic.

4. **Result**: The function returns the logical OR of `increasing` and `decreasing`. If either flag is `True`, the list is monotonic; otherwise, it is not.

This approach ensures that the function efficiently determines the monotonicity of the list with a single pass through the list.