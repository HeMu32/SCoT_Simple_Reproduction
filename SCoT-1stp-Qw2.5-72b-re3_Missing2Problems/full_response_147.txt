[BEGIN PROCESS]
Input: tri: a list of lists representing a triangle, m: the number of rows in the triangle, n: the number of columns in the last row (though n is not necessary since the number of columns in each row is equal to the row index + 1)
Output: max_sum: the maximum total path sum from the top to the bottom of the triangle

1: Initialize a 2D list `dp` of the same dimensions as `tri` to store the maximum path sums at each position.
2: Set `dp[0][0]` to `tri[0][0]` since this is the starting point.
3: For each row starting from the second row:
   - For each element in the row:
     - If the element is the first in the row, it can only come from the element directly above it in the previous row.
     - If the element is the last in the row, it can only come from the element directly above and to the left in the previous row.
     - Otherwise, the element can come from either the element directly above or the element directly above and to the left in the previous row, choose the one with the higher sum.
4: The maximum path sum will be the maximum value in the last row of `dp`.
5: Return the maximum path sum.
[END PROCESS]

[BEGIN CODE]
def max_path_sum(tri, m, n):
    # Initialize the dp array with the same dimensions as tri
    dp = [[0 for _ in range(len(tri[row]))] for row in range(m)]
    
    # The starting point
    dp[0][0] = tri[0][0]
    
    # Fill the dp array
    for row in range(1, m):
        for col in range(len(tri[row])):
            if col == 0:
                # First element in the row can only come from the element directly above
                dp[row][col] = dp[row-1][col] + tri[row][col]
            elif col == len(tri[row]) - 1:
                # Last element in the row can only come from the element directly above and to the left
                dp[row][col] = dp[row-1][col-1] + tri[row][col]
            else:
                # Middle elements can come from either the element directly above or the element directly above and to the left
                dp[row][col] = max(dp[row-1][col-1], dp[row-1][col]) + tri[row][col]
    
    # The maximum path sum is the maximum value in the last row of dp
    max_sum = max(dp[m-1])
    
    return max_sum
[END CODE]

### Explanation:
The function `max_path_sum` calculates the maximum path sum in a given triangle. The dynamic programming approach is used to solve this problem efficiently. The `dp` array is used to store the maximum path sum that can be achieved at each position in the triangle. By iterating through the triangle and updating the `dp` array based on the maximum path sums from the previous row, the function can determine the maximum path sum from the top to the bottom of the triangle. The final answer is the maximum value in the last row of the `dp` array, which represents the maximum path sum achievable.