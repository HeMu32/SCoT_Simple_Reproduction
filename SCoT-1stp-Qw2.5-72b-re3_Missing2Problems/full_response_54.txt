[BEGIN PROCESS]
Input: my_list: a list of non-negative integers
Output: sorted_list: a list of integers sorted in ascending order

1: Find the maximum value in the list to determine the size of the count array
2: Initialize a count array with zeros, with a length equal to the maximum value + 1
3: Count the occurrences of each value in the input list and store the counts in the count array
4: Modify the count array such that each element at each index stores the sum of previous counts
5: Initialize an output array of the same length as the input list
6: Traverse the input list in reverse to maintain the stability of the sort
7: For each element in the input list:
8:     Use the count array to determine the position of the element in the output array
9:     Place the element in the output array
10:    Decrease the count of the element in the count array
11: Return the output array as the sorted list
[END PROCESS]

[BEGIN CODE]
def counting_sort(my_list):
    if not my_list:  # If the list is empty, return it as is
        return my_list

    max_val = max(my_list)  # Find the maximum value in the list
    count = [0] * (max_val + 1)  # Initialize the count array

    # Count each element in the input list
    for num in my_list:
        count[num] += 1

    # Modify the count array to store the sum of previous counts
    for i in range(1, len(count)):
        count[i] += count[i - 1]

    # Initialize the output array
    output = [0] * len(my_list)

    # Build the output array
    for num in reversed(my_list):
        output[count[num] - 1] = num
        count[num] -= 1

    return output
[END CODE]

### Explanation:
The counting sort algorithm is a non-comparative sorting algorithm that is efficient for sorting a collection of objects according to keys that are small integers. It operates by counting the number of objects that have each distinct key value, and using arithmetic on those counts to determine the positions of each key value in the output sequence.

1. **Finding the Maximum Value**: The first step is to find the maximum value in the input list to determine the size of the count array. This is necessary to ensure that the count array can accommodate all possible values in the input list.

2. **Counting Occurrences**: The count array is initialized with zeros, and then the algorithm iterates through the input list, incrementing the count for each value.

3. **Modifying the Count Array**: The count array is modified such that each element at each index stores the sum of previous counts. This modification is crucial because it allows the algorithm to determine the correct position of each element in the output array.

4. **Building the Output Array**: The algorithm then iterates through the input list in reverse order to maintain the stability of the sort. For each element, it uses the count array to determine the correct position in the output array and places the element there. The count for that element is then decremented to handle duplicate values correctly.

5. **Returning the Sorted List**: Finally, the output array, which now contains the sorted elements, is returned.

This approach ensures that the sorting is done in linear time, O(n + k), where n is the number of elements in the input list and k is the range of the input values. The space complexity is also O(n + k) due to the additional count and output arrays.