[BEGIN PROCESS]
Input: list1: a list of numbers, m: an integer representing the start index, n: an integer representing the end index
Output: sum: the sum of the numbers in list1 between the indices m and n (inclusive)

1: Check if m and n are valid indices for list1.
2: Initialize sum to 0.
3: For each index i from m to n (inclusive):
4:     Add the element at index i in list1 to sum.
5: Return sum.
[END PROCESS]

[BEGIN CODE]
def sum_range_list(list1, m, n):
    # Check if m and n are valid indices
    if m < 0 or n >= len(list1) or m > n:
        raise ValueError("Invalid indices m and n for the list")
    
    # Initialize sum to 0
    sum = 0
    
    # Loop through the range from m to n (inclusive)
    for i in range(m, n + 1):
        sum += list1[i]
    
    # Return the sum
    return sum
[END CODE]

### Explanation:
- **Input Validation:** The function first checks if the provided indices `m` and `n` are valid for the list `list1`. If `m` is less than 0, `n` is greater than or equal to the length of the list, or `m` is greater than `n`, a `ValueError` is raised.
- **Sum Calculation:** If the indices are valid, the function initializes a variable `sum` to 0. It then iterates over the range from `m` to `n` (inclusive) and adds each element in this range to `sum`.
- **Return Value:** Finally, the function returns the computed sum.

This approach ensures that the function handles invalid inputs gracefully and correctly computes the sum of the specified range of elements in the list.