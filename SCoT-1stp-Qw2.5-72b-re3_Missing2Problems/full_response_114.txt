[BEGIN PROCESS]
Input: test_list: a list of tuples, where each tuple contains elements that can be used to form a key for frequency counting
Output: A list of tuples, where each tuple from the input list is paired with its frequency of occurrence in the input list

1: Initialize an empty dictionary to store the frequency of each unique tuple
2: Loop through each tuple in the input list
3:     If the tuple is already a key in the dictionary, increment its value by 1
4:     Otherwise, add the tuple to the dictionary with a value of 1
5: Initialize an empty list to store the result
6: Loop through each tuple in the input list
7:     Append a new tuple to the result list, consisting of the original tuple and its frequency from the dictionary
8: Return the result list
[END PROCESS]

[BEGIN CODE]
def assign_freq(test_list):
    # Initialize a dictionary to store the frequency of each tuple
    freq_dict = {}
    
    # Loop through each tuple in the input list
    for tup in test_list:
        if tup in freq_dict:
            # Increment the frequency count if the tuple is already in the dictionary
            freq_dict[tup] += 1
        else:
            # Add the tuple to the dictionary with a frequency of 1
            freq_dict[tup] = 1
    
    # Initialize a list to store the result
    result = []
    
    # Loop through each tuple in the input list
    for tup in test_list:
        # Append a new tuple to the result list, consisting of the original tuple and its frequency
        result.append((tup, freq_dict[tup]))
    
    # Return the result list
    return result
[END CODE]

### Explanation:
The function `assign_freq` takes a list of tuples as input and returns a list of tuples where each tuple is paired with its frequency of occurrence in the input list. The process involves two main steps:

1. **Frequency Counting:**
   - A dictionary `freq_dict` is used to keep track of the frequency of each tuple in the input list.
   - The function iterates over the input list, and for each tuple, it either increments the count in the dictionary or adds a new entry with a count of 1.

2. **Result Construction:**
   - A new list `result` is initialized to store the final output.
   - The function iterates over the input list again, and for each tuple, it appends a new tuple to `result` that contains the original tuple and its frequency from `freq_dict`.

This approach ensures that the function correctly pairs each tuple with its frequency, maintaining the order of the original tuples in the input list.