[BEGIN PROCESS]
Input: arr: a list of elements, n: the length of the list (not necessarily needed for the function, but provided), k: an integer representing the index (1-based) of the element to find
Output: the kth element in the array

1: Check if k is within the valid range (1 to n inclusive).
2:   If k is not within the valid range, raise an error or return an appropriate message.
3: Return the (k-1)th element of the array (since Python uses 0-based indexing).
[END PROCESS]

[BEGIN CODE]
def kth_element(arr, n, k):
    # Check if k is within the valid range
    if k < 1 or k > n:
        raise ValueError("k is out of bounds")
    # Return the (k-1)th element of the array
    return arr[k-1]
[END CODE]

### Explanation:
The function `kth_element` is designed to return the kth element from a given array `arr`. The function takes three parameters: `arr` (the array), `n` (the length of the array, though this is not strictly necessary for the function to work), and `k` (the 1-based index of the element to find).

1. **Input Validation**: The function first checks if `k` is within the valid range (1 to `n` inclusive). If `k` is out of this range, it raises a `ValueError` with an appropriate message. This ensures that the function does not attempt to access an index that does not exist in the array, which would otherwise result in an `IndexError`.

2. **Element Retrieval**: If `k` is within the valid range, the function returns the element at the (k-1)th index of the array. This is because Python uses 0-based indexing, so the 1st element is at index 0, the 2nd element is at index 1, and so on.

This approach ensures that the function is both robust and easy to understand, handling edge cases gracefully and providing clear feedback when the input is invalid.