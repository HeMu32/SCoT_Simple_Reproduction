[BEGIN PROCESS]
Input: num1, num2, n: three integers where num1 and num2 are the numerator and denominator of a fraction, and n is the position of the digit to find in the decimal part of the fraction.
Output: digit: the nth digit in the decimal part of the fraction num1/num2

1: Compute the decimal part of the fraction num1/num2
2: Convert the decimal part to a string to easily access individual digits
3: If the length of the decimal part is less than n:
4:     Return an error message indicating that n is out of range
5: Else:
6:     Return the nth digit from the decimal part
[END PROCESS]

[BEGIN CODE]
def find_Nth_Digit(num1, num2, n):
    # Compute the decimal part of the fraction
    decimal_part = str(num1 / num2).split('.')[1]
    
    # Check if the length of the decimal part is less than n
    if len(decimal_part) < n:
        return "Error: n is out of range for the decimal part of the fraction."
    else:
        # Return the nth digit from the decimal part
        return int(decimal_part[n-1])
[END CODE]

### Explanation:
- The function `find_Nth_Digit` takes three parameters: `num1` (the numerator), `num2` (the denominator), and `n` (the position of the digit to find in the decimal part of the fraction).
- The decimal part of the fraction is obtained by dividing `num1` by `num2` and converting the result to a string. The `split('.')` method is used to separate the integer part from the decimal part, and the `[1]` index is used to select the decimal part.
- The length of the decimal part is checked to ensure that `n` is within the valid range. If `n` is greater than the length of the decimal part, an error message is returned.
- If `n` is within the valid range, the nth digit is extracted from the decimal part and returned as an integer.

### Example Usage:
```python
print(find_Nth_Digit(1, 2, 1))  # Output: 5 (since 1/2 = 0.5)
print(find_Nth_Digit(1, 3, 2))  # Output: 3 (since 1/3 = 0.333333...)
print(find_Nth_Digit(1, 7, 4))  # Output: 2 (since 1/7 = 0.142857142857...)
print(find_Nth_Digit(1, 7, 10)) # Output: "Error: n is out of range for the decimal part of the fraction."
```

This function will work for fractions that have a finite decimal representation or a repeating decimal part, as long as `n` is within the range of the decimal part. For fractions with a very long or infinite repeating decimal part, the function will only work up to the precision of the floating-point representation in Python.