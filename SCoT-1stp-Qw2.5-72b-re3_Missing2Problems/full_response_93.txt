[BEGIN PROCESS]
Input: a: a number (base), b: a number (exponent)
Output: the result of a raised to the power of b

1: If b is 0, return 1 (any number to the power of 0 is 1)
2: If b is negative, return the reciprocal of a raised to the absolute value of b
3: Initialize result to 1
4: for i from 1 to b inclusive:
5:     result = result * a
6: return result
[END PROCESS]

[BEGIN CODE]
def power(a, b):
    if b == 0:
        return 1
    elif b < 0:
        return 1 / power(a, -b)
    result = 1
    for i in range(1, b + 1):
        result *= a
    return result
[END CODE]

### Explanation:
The function `power(a, b)` calculates the value of `a` raised to the power of `b`. The process is broken down into a few steps:

1. **Base Case for Exponent 0**: If `b` is 0, the function returns 1, as any number raised to the power of 0 is 1.
2. **Handling Negative Exponents**: If `b` is negative, the function returns the reciprocal of `a` raised to the absolute value of `b`. This is because \( a^{-b} = \frac{1}{a^b} \).
3. **Initialization**: A variable `result` is initialized to 1. This variable will hold the result of the multiplication.
4. **Loop for Positive Exponents**: A loop runs from 1 to `b` inclusive, multiplying `result` by `a` in each iteration. This effectively calculates \( a \times a \times \ldots \times a \) (b times).
5. **Return the Result**: After the loop, the function returns the `result`.

This approach ensures that the function handles both positive and negative exponents correctly and efficiently.