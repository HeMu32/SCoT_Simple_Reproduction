[BEGIN PROCESS]
Input: L, R: two integers representing the range [L, R]
Output: A tuple (a, b) of two distinct integers such that their least common multiple (LCM) is within the range [L, R]

1: Initialize a variable `found` to False to track if a valid pair is found
2: Loop through each number `a` starting from L to R-1:
3:   Loop through each number `b` starting from a+1 to R:
4:     Calculate the LCM of `a` and `b`
5:     If the LCM is within the range [L, R]:
6:       Set `found` to True
7:       Store the pair (a, b)
8:       Break the inner loop
9:   If `found` is True, break the outer loop
10: If a valid pair is found, return the pair
11: If no valid pair is found, return None
[END PROCESS]

[BEGIN CODE]
def gcd(x, y):
    """Helper function to calculate the greatest common divisor (GCD) of two numbers."""
    while y:
        x, y = y, x % y
    return x

def lcm(x, y):
    """Helper function to calculate the least common multiple (LCM) of two numbers using their GCD."""
    return x * y // gcd(x, y)

def answer(L, R):
    found = False
    for a in range(L, R):
        for b in range(a + 1, R + 1):
            current_lcm = lcm(a, b)
            if L <= current_lcm <= R:
                found = True
                result = (a, b)
                break
        if found:
            break
    return result if found else None
[END CODE]

### Explanation:
The function `answer` is designed to find two distinct numbers `a` and `b` such that their least common multiple (LCM) lies within the given range [L, R]. The process involves:

1. **GCD and LCM Calculation**: Two helper functions, `gcd` and `lcm`, are defined to calculate the greatest common divisor (GCD) and least common multiple (LCM) of two numbers, respectively. The LCM is calculated using the formula `lcm(x, y) = x * y // gcd(x, y)`.

2. **Nested Loops**: The function uses nested loops to iterate through all possible pairs of numbers `a` and `b` within the range [L, R]. The outer loop iterates over `a` from `L` to `R-1`, and the inner loop iterates over `b` from `a+1` to `R` to ensure that `a` and `b` are distinct.

3. **LCM Check**: For each pair `(a, b)`, the LCM is calculated, and it is checked whether it lies within the range [L, R]. If a valid pair is found, the function sets `found` to True, stores the pair, and breaks out of the inner loop. If a valid pair is found, the outer loop is also broken.

4. **Return Result**: If a valid pair is found, the function returns the pair `(a, b)`. If no valid pair is found after all iterations, the function returns `None`.

This approach ensures that the function efficiently finds a valid pair of numbers with their LCM within the specified range, if such a pair exists.