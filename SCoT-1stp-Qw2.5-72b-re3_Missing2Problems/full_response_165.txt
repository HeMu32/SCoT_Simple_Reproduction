[BEGIN PROCESS]
Input: str1: a string
Output: count: the number of characters in the string that are at the same position in the English alphabet as their index in the string (considering 0-based indexing and 'a' or 'A' as the 0th character)

1: Initialize count to 0
2: Convert the string to lowercase to handle both uppercase and lowercase characters uniformly
3: Loop through each character in the string with its index
4:     Calculate the position of the character in the alphabet (0-based)
5:     If the position matches the index, increment count by 1
6: Return count
[END PROCESS]

[BEGIN CODE]
def count_char_position(str1):
    count = 0
    str1 = str1.lower()  # Convert the string to lowercase
    for index, char in enumerate(str1):
        # Calculate the position of the character in the alphabet (0-based)
        position = ord(char) - ord('a')
        if position == index:
            count += 1
    return count
[END CODE]

### Explanation:
The function `count_char_position` is designed to count how many characters in the given string `str1` are at the same position in the English alphabet as their index in the string. The process involves the following steps:

1. **Initialization**: A counter `count` is initialized to 0 to keep track of the number of matching characters.
2. **Case Normalization**: The string is converted to lowercase using `str1.lower()` to ensure that both uppercase and lowercase characters are treated the same.
3. **Iteration**: The function iterates over each character in the string using a `for` loop, which provides both the index and the character.
4. **Character Position Calculation**: For each character, the function calculates its position in the alphabet by subtracting the ASCII value of 'a' from the ASCII value of the character. This gives a 0-based index where 'a' is 0, 'b' is 1, and so on.
5. **Comparison and Counting**: If the calculated position matches the current index, the counter `count` is incremented.
6. **Return Result**: After the loop completes, the function returns the value of `count`.

This approach ensures that the function correctly counts the characters that are at the same position in the alphabet as their index in the string, handling both uppercase and lowercase characters.