Input: A sorted array of integers where every element appears twice except for one.
Output: The element that appears only once in the array.

1: Initialize two pointers, `left` and `right`, to the start and end of the array, respectively.
2: While `left` is less than `right`:
3:     Calculate the middle index `mid` as `(left + right) // 2`.
4:     Check if the middle element is the unique element:
5:         If the middle element is not equal to its neighbors, return the middle element.
6:     If the middle element is even and equal to the next element, or if the middle element is odd and equal to the previous element, the unique element must be on the right side:
7:         Set `left` to `mid + 1`.
8:     Otherwise, the unique element must be on the left side:
9:         Set `right` to `mid`.
10: If the loop completes, return the element at the `left` pointer, which should be the unique element.