[BEGIN PROCESS]
Input: n, k: integers representing the total number of items and the number of items to choose, respectively
Output: binomial_coeff: the binomial coefficient, which is the number of ways to choose k items from n items without regard to the order

1: If k is 0 or k is equal to n, return 1 because there is exactly one way to choose no items or all items.
2: Initialize a variable binomial_coeff to 1 to store the binomial coefficient.
3: For i from 1 to k:
4:     Multiply binomial_coeff by (n - i + 1) and divide by i.
5: Return binomial_coeff.
[END PROCESS]

[BEGIN CODE]
def binomial_Coeff(n, k):
    # If k is 0 or equal to n, there is only one way to choose the items
    if k == 0 or k == n:
        return 1
    
    # Initialize the binomial coefficient
    binomial_coeff = 1
    
    # Calculate the binomial coefficient using the multiplicative formula
    for i in range(1, k + 1):
        binomial_coeff *= (n - i + 1)
        binomial_coeff //= i
    
    return binomial_coeff
[END CODE]

### Explanation:
The binomial coefficient, often denoted as \( C(n, k) \) or \( \binom{n}{k} \), represents the number of ways to choose \( k \) elements from a set of \( n \) elements without regard to the order. The formula for the binomial coefficient is:

\[ C(n, k) = \frac{n!}{k!(n-k)!} \]

However, directly computing factorials can be computationally expensive and prone to overflow for large values of \( n \). Therefore, a more efficient approach is to use the multiplicative formula:

\[ C(n, k) = \frac{n \times (n-1) \times \cdots \times (n-k+1)}{k \times (k-1) \times \cdots \times 1} \]

This formula avoids the need to compute large factorials and reduces the risk of overflow. The loop in the code iterates from 1 to \( k \), multiplying the numerator and dividing by the denominator at each step, which effectively computes the binomial coefficient in a more efficient manner.