[BEGIN PROCESS]
Input: test_tup1, test_tup2: two nested tuples of the same structure, where each element is a tuple
Output: res: a nested tuple with the same structure as the inputs, where each element is the sum of the corresponding elements from test_tup1 and test_tup2

1: Define a helper function `add_tuples` that takes two tuples and returns a tuple of their element-wise sum.
2: Use a recursive function `add_nested` to handle the nested structure:
3:     If the current elements are tuples, call `add_tuples` on them.
4:     If the current elements are not tuples, return the sum of the elements.
5: Use the `add_nested` function to process the nested tuples.
6: Return the result.
[END PROCESS]

[BEGIN CODE]
def add_tuples(t1, t2):
  """Helper function to add two tuples element-wise."""
  return tuple(a + b for a, b in zip(t1, t2))

def add_nested_tuples(test_tup1, test_tup2):
  """Function to perform index-wise addition of tuple elements in the given two nested tuples."""
  
  def add_nested(t1, t2):
    """Recursive function to handle nested tuples."""
    if isinstance(t1, tuple) and isinstance(t2, tuple):
      return add_tuples(t1, t2)
    else:
      return t1 + t2
  
  # Using a recursive approach to handle nested structures
  return add_nested(test_tup1, test_tup2)
[END CODE]

### Explanation

1. **Helper Function `add_tuples`**:
   - This function takes two tuples and returns a new tuple where each element is the sum of the corresponding elements from the input tuples. It uses a generator expression inside the `tuple` constructor to achieve this.

2. **Recursive Function `add_nested`**:
   - This function is designed to handle the nested structure of the tuples. It checks if the current elements are tuples. If they are, it calls `add_tuples` to add them element-wise. If they are not tuples, it simply returns the sum of the elements.
   - This function is called recursively to handle nested structures, ensuring that each level of nesting is processed correctly.

3. **Main Function `add_nested_tuples`**:
   - This function initializes the recursive process by calling `add_nested` with the two input tuples.
   - It returns the result of the recursive function, which is the nested tuple with the element-wise sums.

This approach ensures that the function can handle tuples of any depth and structure, as long as the two input tuples have the same structure.