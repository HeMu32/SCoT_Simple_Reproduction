[BEGIN PROCESS]
Input: list1: a list of numerical values
Output: positions: a list of indices where the minimum value occurs in list1

1: Initialize an empty list `positions` to store the indices of the minimum values.
2: Check if the input list `list1` is empty. If it is, return an empty list.
3: Find the minimum value in `list1` using the `min` function.
4: Iterate over the list `list1` using a loop, keeping track of the index and the value.
5: For each element, if the value is equal to the minimum value, append the index to the `positions` list.
6: After the loop, return the `positions` list.
[END PROCESS]

[BEGIN CODE]
def position_min(list1):
    positions = []
    if not list1:  # Check if the list is empty
        return positions
    min_value = min(list1)  # Find the minimum value in the list
    for index, value in enumerate(list1):  # Iterate over the list with index and value
        if value == min_value:  # Check if the current value is the minimum value
            positions.append(index)  # Append the index to the positions list
    return positions  # Return the list of positions
[END CODE]

### Explanation:
The function `position_min` is designed to find all the indices in a given list where the minimum value occurs. The process involves:
- Checking if the input list is empty to handle edge cases.
- Finding the minimum value in the list using Python's built-in `min` function.
- Iterating over the list using a loop, where each iteration provides both the index and the value of the current element.
- Comparing each value to the minimum value and appending the index to the `positions` list if they match.
- Finally, returning the `positions` list, which contains all the indices where the minimum value is found.