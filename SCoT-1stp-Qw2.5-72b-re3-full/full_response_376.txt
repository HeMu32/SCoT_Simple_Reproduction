[BEGIN PROCESS]
Input: test_tup: a tuple of elements
Output: res: a tuple with elements that occur more than once replaced by a custom value (e.g., 'custom_value')

1: Initialize an empty list res
2: Initialize an empty dictionary count_dict to keep track of the count of each element
3: For each element in test_tup:
4:     If the element is not in count_dict:
5:         Add the element to count_dict with a count of 1
6:     Else:
7:         Increment the count of the element in count_dict by 1
8: For each element in test_tup:
9:     If the count of the element in count_dict is 1:
10:        Append the element to res
11:    Else:
12:        Append 'custom_value' to res
13: Convert res to a tuple
14: Return res
[END PROCESS]

[BEGIN CODE]
def remove_replica(test_tup):
    res = []
    count_dict = {}
    
    # Count occurrences of each element
    for element in test_tup:
        if element not in count_dict:
            count_dict[element] = 1
        else:
            count_dict[element] += 1
    
    # Replace duplicates with 'custom_value'
    for element in test_tup:
        if count_dict[element] == 1:
            res.append(element)
        else:
            res.append('custom_value')
    
    return tuple(res)
[END CODE]

### Explanation:
The function `remove_replica` takes a tuple `test_tup` as input and returns a new tuple where elements that occur more than once are replaced with a custom value (in this case, `'custom_value'`).

1. **Counting Occurrences**: The first loop iterates through the input tuple and uses a dictionary `count_dict` to keep track of how many times each element appears.
2. **Replacing Duplicates**: The second loop iterates through the input tuple again. For each element, it checks the count in `count_dict`. If the count is 1, the element is appended to the result list `res`. If the count is greater than 1, `'custom_value'` is appended instead.
3. **Returning the Result**: Finally, the result list `res` is converted back to a tuple and returned.

This approach ensures that all duplicates are replaced with the custom value while preserving the order of the elements in the original tuple.