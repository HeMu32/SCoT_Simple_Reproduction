[BEGIN PROCESS]
Input: s: a string, n: the length of the string
Output: count: the number of substrings where the sum of the digits equals the length of the substring

1: Initialize a variable `count` to 0 to keep track of the number of valid substrings.
2: For each starting index `i` from 0 to `n-1`:
3:     Initialize a variable `sum_of_digits` to 0 to keep track of the sum of digits in the current substring.
4:     For each ending index `j` from `i` to `n-1`:
5:         If the character at index `j` is a digit:
6:             Add the integer value of the character at index `j` to `sum_of_digits`.
7:         If `sum_of_digits` equals `j - i + 1` (the length of the current substring):
8:             Increment `count` by 1.
9: Return `count`.
[END PROCESS]

[BEGIN CODE]
def count_Substrings(s, n):
    count = 0
    for i in range(n):
        sum_of_digits = 0
        for j in range(i, n):
            if s[j].isdigit():
                sum_of_digits += int(s[j])
            if sum_of_digits == j - i + 1:
                count += 1
    return count
[END CODE]

### Explanation:
The function `count_Substrings` is designed to count the number of substrings within a given string `s` where the sum of the digits in the substring equals the length of the substring. The function iterates over all possible substrings of `s` and checks if the sum of the digits in each substring equals the length of that substring. If it does, the function increments the count. The function finally returns the total count of such substrings.

- **Step 1:** Initialize `count` to 0, which will store the number of valid substrings.
- **Step 2-3:** Use a nested loop to generate all possible substrings. The outer loop starts at each character in the string, and the inner loop extends the substring from the starting character to the end of the string.
- **Step 4-5:** For each character in the substring, check if it is a digit. If it is, add its integer value to `sum_of_digits`.
- **Step 6-7:** Check if the `sum_of_digits` equals the length of the current substring (`j - i + 1`). If it does, increment `count`.
- **Step 8:** After all substrings have been checked, return `count`.

This approach ensures that all possible substrings are considered, and the function accurately counts those that meet the specified condition.