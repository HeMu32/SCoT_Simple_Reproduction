[BEGIN PROCESS]
Input: n: an integer
Output: count: the number of digits in the integer n

1: Initialize count to 0
2: If n is 0, return 1 (since 0 has one digit)
3: While n is not 0:
4:     Increment count by 1
5:     Set n to the integer division of n by 10 (this removes the last digit of n)
6: Return count
[END PROCESS]

[BEGIN CODE]
def count_Digit(n):
    count = 0
    if n == 0:
        return 1
    n = abs(n)  # Ensure n is positive to handle negative numbers correctly
    while n != 0:
        count += 1
        n //= 10
    return count
[END CODE]

### Explanation:
The function `count_Digit` is designed to count the number of digits in a given integer `n`. The process involves the following steps:

1. **Initialization**: Start by initializing a counter `count` to 0. This will keep track of the number of digits.
2. **Special Case for Zero**: If the input `n` is 0, the function immediately returns 1 because 0 has one digit.
3. **Handling Negative Numbers**: Convert `n` to its absolute value to handle negative numbers correctly.
4. **Counting Digits**: Use a while loop to repeatedly divide `n` by 10 (using integer division `//`) and increment the `count` by 1 each time. This process continues until `n` becomes 0.
5. **Return the Count**: Finally, return the value of `count`, which represents the number of digits in the original number.

This approach ensures that the function works correctly for both positive and negative integers, and it handles the special case of 0.