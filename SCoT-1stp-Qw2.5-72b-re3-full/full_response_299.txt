Certainly! Let's tackle the task of writing a function `max_aggregate` that calculates the maximum aggregate from a list of tuples. Each tuple in the list contains two elements: a string and an integer. The goal is to find the string that has the maximum sum of integers associated with it.

### Understanding the Requirement:
- **Input:** A list of tuples, where each tuple contains a string and an integer.
- **Output:** The string that has the maximum sum of integers associated with it.

### Solving Process:
[BEGIN PROCESS]
1. **Initialize Variables:**
   - `max_aggregate_sum` to store the maximum sum of integers found so far. Initialize it to 0.
   - `max_aggregate_string` to store the string associated with the maximum sum. Initialize it to an empty string.
   - `aggregate_dict` to store the sum of integers for each unique string. Initialize it as an empty dictionary.

2. **Iterate Through the List of Tuples:**
   - For each tuple `(string, integer)` in the list:
     - If the string is not already in `aggregate_dict`, add it with the integer as its value.
     - If the string is already in `aggregate_dict`, add the integer to the existing value.

3. **Find the Maximum Aggregate:**
   - Iterate through the `aggregate_dict` to find the string with the maximum sum.
   - Update `max_aggregate_sum` and `max_aggregate_string` accordingly.

4. **Return the Result:**
   - Return the string with the maximum aggregate sum.
[END PROCESS]

### Code Implementation:
[BEGIN CODE]
def max_aggregate(stdata):
    # Initialize variables
    max_aggregate_sum = 0
    max_aggregate_string = ""
    aggregate_dict = {}

    # Iterate through the list of tuples
    for string, integer in stdata:
        if string in aggregate_dict:
            aggregate_dict[string] += integer
        else:
            aggregate_dict[string] = integer

    # Find the maximum aggregate
    for string, total in aggregate_dict.items():
        if total > max_aggregate_sum:
            max_aggregate_sum = total
            max_aggregate_string = string

    # Return the result
    return max_aggregate_string
[END CODE]

### Explanation:
- **Initialization:** We start by initializing `max_aggregate_sum` to 0 and `max_aggregate_string` to an empty string. We also initialize an empty dictionary `aggregate_dict` to keep track of the sum of integers for each unique string.
- **Iteration:** We iterate through each tuple in the input list `stdata`. For each tuple, we check if the string is already in `aggregate_dict`. If it is, we add the integer to the existing sum. If it is not, we add the string to the dictionary with the integer as its value.
- **Finding the Maximum:** After populating `aggregate_dict`, we iterate through it to find the string with the maximum sum. We update `max_aggregate_sum` and `max_aggregate_string` whenever we find a new maximum.
- **Return:** Finally, we return the string with the maximum aggregate sum.

This approach ensures that we efficiently calculate the maximum aggregate sum and return the corresponding string.