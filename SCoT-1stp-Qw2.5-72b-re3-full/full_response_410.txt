[BEGIN PROCESS]
Input: listval: a list containing heterogeneous elements (integers, floats, strings, etc.)
Output: min_value: the minimum numeric value in the list

1: Initialize a variable min_value to None, which will store the minimum value found
2: Loop through each element in listval:
3:     If the element is a numeric type (int or float):
4:         If min_value is None or the element is less than min_value:
5:             Set min_value to the element
6: If min_value is still None after the loop, raise an error indicating no numeric values were found
7: Return min_value
[END PROCESS]

[BEGIN CODE]
def min_val(listval):
    min_value = None
    for element in listval:
        if isinstance(element, (int, float)):
            if min_value is None or element < min_value:
                min_value = element
    if min_value is None:
        raise ValueError("No numeric values found in the list")
    return min_value
[END CODE]

### Explanation:
The function `min_val` is designed to find the minimum numeric value in a given list that may contain various data types, including non-numeric types. Hereâ€™s a breakdown of the implementation:

1. **Initialization**: We start by initializing `min_value` to `None`. This variable will be used to keep track of the smallest numeric value found in the list.

2. **Loop Through Elements**: We iterate over each element in the input list `listval`.

3. **Check for Numeric Type**: For each element, we check if it is of type `int` or `float` using the `isinstance` function. This ensures that we only consider numeric values.

4. **Update Minimum Value**: If the current element is numeric and either `min_value` is `None` (indicating it's the first numeric value found) or the current element is less than `min_value`, we update `min_value` to the current element.

5. **Handle No Numeric Values**: After the loop, if `min_value` is still `None`, it means no numeric values were found in the list. In this case, we raise a `ValueError` to indicate this situation.

6. **Return the Minimum Value**: If a numeric value was found, we return `min_value`.

This approach ensures that the function correctly handles lists with mixed data types and returns the minimum numeric value, or raises an error if no such value exists.