[BEGIN PROCESS]
Input: A: a list of integers
Output: A: a list of integers with all zeroes moved to the end while maintaining the relative order of the non-zero elements

1: Initialize an empty list `non_zero` to store non-zero elements
2: Initialize an empty list `zeroes` to store zero elements
3: Iterate through each element in the input list `A`
4:   If the current element is not zero:
5:     Append the current element to the `non_zero` list
6:   Else:
7:     Append the current element to the `zeroes` list
8: Concatenate the `non_zero` list with the `zeroes` list
9: Return the concatenated list
[END PROCESS]

[BEGIN CODE]
def re_order(A):
    non_zero = []
    zeroes = []
    for element in A:
        if element != 0:
            non_zero.append(element)
        else:
            zeroes.append(element)
    return non_zero + zeroes
[END CODE]

### Explanation:
The function `re_order` is designed to move all zeroes to the end of the given list `A` while maintaining the relative order of the non-zero elements. This is achieved by separating the non-zero elements and the zero elements into two different lists, `non_zero` and `zeroes`, respectively. After iterating through the input list, the function concatenates the `non_zero` list with the `zeroes` list and returns the result. This ensures that all non-zero elements retain their original order, and all zeroes are moved to the end of the list.