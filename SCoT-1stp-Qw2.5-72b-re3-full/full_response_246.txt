[BEGIN PROCESS]
Input: number: a positive number for which the square root is to be calculated
Output: the square root of the input number using the Babylonian method

1: Check if the input number is non-negative.
2: If the number is less than or equal to 0, return 0 as the square root.
3: Initialize a guess for the square root, typically starting with the number itself or 1.
4: Set a tolerance level to determine when to stop the iteration (e.g., 1e-7).
5: Use a loop to iteratively improve the guess:
   5.1: Calculate a new guess using the formula: new_guess = (guess + number / guess) / 2
   5.2: Check if the difference between the new guess and the old guess is less than the tolerance.
   5.3: If the difference is less than the tolerance, the new guess is close enough to the actual square root, so break the loop.
   5.4: Otherwise, set the old guess to the new guess and continue the loop.
6: Return the new guess as the square root of the number.
[END PROCESS]

[BEGIN CODE]
def babylonian_squareroot(number):
    if number <= 0:
        return 0
    
    guess = number
    tolerance = 1e-7
    
    while True:
        new_guess = (guess + number / guess) / 2
        if abs(new_guess - guess) < tolerance:
            break
        guess = new_guess
    
    return new_guess
[END CODE]

### Explanation:
The Babylonian method, also known as Heron's method, is an iterative algorithm for finding the square root of a number. It starts with an initial guess and refines it by averaging the guess with the quotient of the number and the guess. This process is repeated until the guess is sufficiently accurate, which is determined by a predefined tolerance level. The method is efficient and converges quickly, making it a popular choice for computing square roots. In the provided code, the loop continues until the difference between the new guess and the old guess is less than the specified tolerance, ensuring that the result is as accurate as needed.