[BEGIN PROCESS]
Input: s: a binary string, n: an integer representing the length of the string
Output: count: the number of rotations of the string that result in an odd binary number

1: Initialize count to 0
2: Loop i from 0 to n-1 (inclusive)
3:     Rotate the string s to the left by i positions
4:     Convert the rotated string to an integer
5:     If the integer is odd, increment count by 1
6: Return count
[END PROCESS]

[BEGIN CODE]
def odd_Equivalent(s, n):
    count = 0
    for i in range(n):
        # Rotate the string to the left by i positions
        rotated_s = s[i:] + s[:i]
        # Convert the rotated string to an integer
        num = int(rotated_s, 2)
        # Check if the number is odd
        if num % 2 == 1:
            count += 1
    return count
[END CODE]

### Explanation:
The function `odd_Equivalent` takes a binary string `s` and its length `n` as inputs. The goal is to count how many rotations of the string result in a binary number that is odd.

1. **Initialization**: We start by initializing a counter `count` to 0. This counter will keep track of the number of rotations that result in an odd binary number.

2. **Loop Through Rotations**: We loop through all possible rotations of the string, from 0 to `n-1`. For each rotation:
   - **Rotate the String**: We rotate the string `s` to the left by `i` positions. This is done by slicing the string into two parts: the part from index `i` to the end, and the part from the beginning to index `i-1`. We then concatenate these two parts to form the rotated string.
   - **Convert to Integer**: We convert the rotated binary string to an integer using `int(rotated_s, 2)`.
   - **Check for Oddness**: We check if the resulting integer is odd by using the modulus operator `%`. If the number is odd (`num % 2 == 1`), we increment the `count` by 1.

3. **Return the Count**: After the loop completes, we return the `count`, which represents the number of rotations that result in an odd binary number.

This approach ensures that we consider all possible rotations of the string and accurately count those that result in an odd number.