[BEGIN PROCESS]
Input: n: an integer  
Output: result: the smallest power of 2 that is greater than or equal to n  
1: If n is less than or equal to 0, return 1 (since the smallest power of 2 is 1)  
2: Initialize a variable `result` to 1  
3: While `result` is less than `n`:  
4:     Multiply `result` by 2  
5: Return `result`  
[END PROCESS]

[BEGIN CODE]
def next_Power_Of_2(n):
    if n <= 0:
        return 1
    result = 1
    while result < n:
        result *= 2
    return result
[END CODE]

### Explanation:
The function `next_Power_Of_2` is designed to find the smallest power of 2 that is greater than or equal to the given integer `n`. The process involves the following steps:

1. **Edge Case Handling**: If `n` is less than or equal to 0, the function returns 1, as the smallest power of 2 is 1. This handles the edge case where the input is non-positive.

2. **Initialization**: A variable `result` is initialized to 1, which is the smallest power of 2.

3. **Loop to Find the Next Power of 2**: A while loop is used to repeatedly multiply `result` by 2 until `result` is no longer less than `n`. This ensures that `result` becomes the smallest power of 2 that is greater than or equal to `n`.

4. **Return the Result**: Once the loop condition is no longer satisfied, `result` is returned as the smallest power of 2 greater than or equal to `n`.

This approach is efficient and straightforward, leveraging a simple loop to achieve the desired result.