[BEGIN PROCESS]
Input: list1: a nested list, n: an integer representing the index of the column to remove
Output: a new nested list with the specified column removed

1: Initialize an empty list `result` to store the new nested list without the specified column.
2: Loop through each sublist in `list1`:
3:     Initialize an empty list `new_sublist` to store the elements of the current sublist except for the column to be removed.
4:     Loop through the index `i` of each element in the current sublist:
5:         If `i` is not equal to `n`:
6:             Append the element at index `i` to `new_sublist`.
7:     Append `new_sublist` to `result`.
8: Return `result`.
[END PROCESS]

[BEGIN CODE]
def remove_column(list1, n):
    result = []
    for sublist in list1:
        new_sublist = []
        for i in range(len(sublist)):
            if i != n:
                new_sublist.append(sublist[i])
        result.append(new_sublist)
    return result
[END CODE]

### Explanation

The function `remove_column` takes two parameters: `list1`, which is a nested list, and `n`, which is the index of the column to be removed. The function returns a new nested list where the specified column has been removed.

1. **Initialization**: An empty list `result` is initialized to store the new nested list.
2. **Outer Loop**: The function iterates over each sublist in `list1`.
3. **Inner Loop**: For each sublist, another loop iterates over the indices of the elements in the sublist.
4. **Condition Check**: If the current index `i` is not equal to `n`, the element at index `i` is appended to `new_sublist`.
5. **Appending New Sublist**: After processing all elements in the current sublist, `new_sublist` is appended to `result`.
6. **Return Result**: Finally, the function returns the `result` list, which contains the nested list with the specified column removed.

This approach ensures that the specified column is removed from each sublist in the nested list, and the resulting list is returned.