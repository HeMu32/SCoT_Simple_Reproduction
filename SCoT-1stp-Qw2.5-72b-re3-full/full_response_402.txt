[BEGIN PROCESS]
Input: n, r, p: integers where n and r are non-negative and p is a prime number
Output: The value of nCr % p

1: If r is greater than n, return 0 because it's not possible to choose more items than available.
2: If r is 0 or r is equal to n, return 1 because there is exactly one way to choose no items or all items.
3: Initialize a variable `result` to 1 to store the result of nCr % p.
4: Use a loop to calculate the result:
   a: For each value i from 1 to r:
      i: Multiply `result` by (n - r + i) and take modulo p.
      ii: Divide `result` by i and take modulo p.
5: Return the final value of `result`.

This process uses the properties of modular arithmetic to efficiently compute the binomial coefficient modulo a prime number. The loop iterates through the values, updating the result with the necessary multiplications and divisions, all while keeping the result within the bounds of the prime number p.
[END PROCESS]

[BEGIN CODE]
def ncr_modp(n, r, p):
    # If r is greater than n, it's not possible to choose more items than available
    if r > n:
        return 0
    # If r is 0 or r is equal to n, there is exactly one way to choose no items or all items
    if r == 0 or r == n:
        return 1
    
    # Initialize result to 1
    result = 1
    
    # Calculate nCr % p using a loop
    for i in range(1, r + 1):
        result = (result * (n - r + i)) % p
        result = (result * pow(i, p - 2, p)) % p  # Using Fermat's Little Theorem for modular inverse
    
    return result
[END CODE]

### Explanation:
The function `ncr_modp` computes the binomial coefficient \( \binom{n}{r} \) modulo a prime number \( p \). The key steps are:

1. **Edge Cases**: Handle cases where \( r \) is greater than \( n \) or \( r \) is 0 or \( n \).
2. **Initialization**: Start with `result` set to 1.
3. **Loop Calculation**: Use a loop to iterate from 1 to \( r \). In each iteration:
   - Multiply `result` by \( (n - r + i) \) and take modulo \( p \).
   - Divide `result` by \( i \) and take modulo \( p \). This division is done using the modular inverse of \( i \) modulo \( p \), which is computed using Fermat's Little Theorem.
4. **Return Result**: After the loop, return the final value of `result`.

This approach ensures that the computation is efficient and avoids large intermediate values that could cause overflow. The use of modular inverse allows for the division to be performed correctly under modular arithmetic.