[BEGIN PROCESS]
Input: N: an integer
Output: The next perfect square greater than N

1: Start with the integer N
2: Increment N by 1
3: Loop while N is not a perfect square:
   3.1: Check if the square root of N is an integer (i.e., N is a perfect square)
   3.2: If N is a perfect square, break the loop
   3.3: Otherwise, increment N by 1
4: Return N as the next perfect square
[END PROCESS]

[BEGIN CODE]
import math

def next_Perfect_Square(N):
    N += 1
    while True:
        root = math.sqrt(N)
        if root.is_integer():
            break
        N += 1
    return N
[END CODE]

### Explanation:
The function `next_Perfect_Square` is designed to find the next perfect square greater than a given integer `N`. The process involves incrementing `N` by 1 and then checking if the incremented value is a perfect square. This is done by taking the square root of the current value of `N` and checking if it is an integer. If it is, the loop breaks, and the current value of `N` is returned as the next perfect square. If not, `N` is incremented again, and the process repeats until a perfect square is found. This ensures that the function efficiently finds the next perfect square greater than the input `N`.