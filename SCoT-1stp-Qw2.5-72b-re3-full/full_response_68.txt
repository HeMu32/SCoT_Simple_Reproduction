[BEGIN PROCESS]
Input: A: a list of integers
Output: True if the list is monotonic, False otherwise

1: Initialize two boolean variables, increasing and decreasing, to True.
2: Iterate through the list from the second element to the last element.
3: For each element, compare it with the previous element:
   3.1: If the current element is greater than the previous element, set decreasing to False.
   3.2: If the current element is less than the previous element, set increasing to False.
4: After the loop, if either increasing or decreasing is True, the list is monotonic.
5: Return the logical OR of increasing and decreasing.
[END PROCESS]

[BEGIN CODE]
def is_Monotonic(A):
    increasing = True
    decreasing = True

    for i in range(1, len(A)):
        if A[i] > A[i - 1]:
            decreasing = False
        elif A[i] < A[i - 1]:
            increasing = False

    return increasing or decreasing
[END CODE]

### Explanation:
The function `is_Monotonic` checks if a given list `A` is monotonic. A list is considered monotonic if it is either entirely non-increasing or non-decreasing. The function uses two boolean flags, `increasing` and `decreasing`, to track whether the list is non-decreasing or non-increasing, respectively.

- **Initialization**: Both `increasing` and `decreasing` are initially set to `True`.
- **Iteration**: The function iterates through the list starting from the second element. For each element, it compares it with the previous element:
  - If the current element is greater than the previous element, the list cannot be non-increasing, so `decreasing` is set to `False`.
  - If the current element is less than the previous element, the list cannot be non-decreasing, so `increasing` is set to `False`.
- **Final Check**: After the loop, if either `increasing` or `decreasing` is still `True`, the list is monotonic. The function returns the logical OR of `increasing` and `decreasing`.

This approach ensures that the function efficiently determines the monotonicity of the list with a single pass through the list.