[BEGIN PROCESS]
Input: n: an integer representing the position in the Newman-Conway sequence
Output: The n-th number in the Newman-Conway sequence

The Newman-Conway sequence is defined as follows:
- P(1) = 1
- P(2) = 1
- For all n > 2, P(n) = P(P(n - 1)) + P(n - P(n - 1))

1: If n is 1 or 2, return 1 (base cases)
2: Initialize a list `seq` with the first two elements of the sequence [1, 1]
3: For i from 3 to n:
4:     Calculate the next element in the sequence using the formula P(i) = P(P(i - 1)) + P(i - P(i - 1))
5:     Append the calculated value to `seq`
6: Return the n-th element of `seq`
[END PROCESS]

[BEGIN CODE]
def sequence(n):
    if n == 1 or n == 2:
        return 1
    seq = [1, 1]
    for i in range(3, n + 1):
        next_val = seq[seq[i - 2] - 1] + seq[i - seq[i - 2] - 1]
        seq.append(next_val)
    return seq[n - 1]
[END CODE]

### Explanation:
The Newman-Conway sequence is a recursive sequence where each term is defined based on the previous terms. The function `sequence(n)` calculates the n-th term of this sequence.

1. **Base Cases**: If `n` is 1 or 2, the function returns 1, as these are the first two terms of the sequence.
2. **Initialization**: A list `seq` is initialized with the first two terms of the sequence, `[1, 1]`.
3. **Loop**: A loop runs from 3 to `n` to calculate each subsequent term in the sequence.
   - The term `P(i)` is calculated using the formula `P(i) = P(P(i - 1)) + P(i - P(i - 1))`.
   - The calculated term is appended to the list `seq`.
4. **Return**: The n-th term of the sequence is returned, which is `seq[n - 1]` (since list indices are 0-based).

This approach ensures that the sequence is built iteratively, avoiding the overhead of recursive function calls and making the solution efficient.