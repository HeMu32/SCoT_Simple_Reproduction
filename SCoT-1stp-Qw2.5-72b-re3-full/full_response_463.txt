[BEGIN PROCESS]
Input: arr: a list of integers
Output: max_product: the maximum product of a contiguous subarray within arr

1: Initialize `max_product` to the first element of arr.
2: Initialize `current_max` and `current_min` to the first element of arr. These will track the maximum and minimum product at the current position, considering the possibility of negative numbers flipping the sign of the product.
3: Iterate through the array starting from the second element.
4: For each element in the array:
5:     If the current element is negative, swap `current_max` and `current_min`. This is because multiplying a negative number by a negative number results in a positive number, which could potentially be the new maximum.
6:     Update `current_max` to be the maximum of the current element and the product of `current_max` and the current element.
7:     Update `current_min` to be the minimum of the current element and the product of `current_min` and the current element.
8:     Update `max_product` to be the maximum of `max_product` and `current_max`.
9: Return `max_product`.
[END PROCESS]

[BEGIN CODE]
def max_subarray_product(arr):
    if not arr:
        return 0

    max_product = arr[0]
    current_max = arr[0]
    current_min = arr[0]

    for num in arr[1:]:
        if num < 0:
            current_max, current_min = current_min, current_max
        
        current_max = max(num, current_max * num)
        current_min = min(num, current_min * num)
        
        max_product = max(max_product, current_max)

    return max_product
[END CODE]

### Explanation:
The function `max_subarray_product` is designed to find the maximum product of a contiguous subarray within the given array `arr`. The approach used here is dynamic programming, where we keep track of the maximum and minimum product up to the current position. This is necessary because a negative number can turn a minimum product into a maximum product and vice versa.

- **Initialization**: We start by initializing `max_product`, `current_max`, and `current_min` to the first element of the array. This handles the base case and ensures that we have a starting point for our calculations.
- **Iteration**: We iterate through the array starting from the second element. For each element:
  - If the current element is negative, we swap `current_max` and `current_min` because multiplying a negative number by a negative number results in a positive number, which could be the new maximum.
  - We update `current_max` to be the maximum of the current element and the product of `current_max` and the current element. This ensures that we consider both the possibility of the current element being the start of a new subarray and the continuation of the previous subarray.
  - Similarly, we update `current_min` to be the minimum of the current element and the product of `current_min` and the current element. This helps in handling negative numbers and ensuring that we have the correct minimum product.
  - We update `max_product` to be the maximum of `max_product` and `current_max`. This ensures that we keep track of the highest product found so far.
- **Return**: Finally, we return `max_product`, which is the maximum product of any contiguous subarray within the given array.

This approach ensures that we efficiently find the maximum product subarray with a time complexity of O(n), where n is the length of the array.