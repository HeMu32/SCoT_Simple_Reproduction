[BEGIN PROCESS]
Input: nums1, nums2: two lists of integers
Output: result: a list containing the result of modulo division of corresponding elements from nums1 and nums2

1: Check if the lengths of nums1 and nums2 are equal.
2: If the lengths are not equal, raise an error indicating that the lists must be of the same length.
3: Use the map function to apply a lambda function that takes two arguments and returns the result of the first argument modulo the second argument.
4: Convert the map object to a list to get the final result.
5: Return the result list.
[END PROCESS]

[BEGIN CODE]
def moddiv_list(nums1, nums2):
    # Check if the lengths of the lists are equal
    if len(nums1) != len(nums2):
        raise ValueError("Both lists must have the same length.")
    
    # Use map and lambda to apply modulo division to corresponding elements
    result = list(map(lambda x, y: x % y, nums1, nums2))
    
    return result
[END CODE]

### Explanation

1. **Input Validation**: The function first checks if the lengths of `nums1` and `nums2` are equal. If they are not, it raises a `ValueError` with a message indicating that the lists must be of the same length. This ensures that the modulo operation can be applied element-wise without any index out of range errors.

2. **Map and Lambda Function**: The `map` function is used to apply a lambda function to each pair of elements from `nums1` and `nums2`. The lambda function takes two arguments `x` and `y` and returns the result of `x % y`, which is the modulo operation.

3. **Result Conversion**: The `map` function returns a map object, which is then converted to a list using the `list` function. This list contains the results of the modulo operations for each pair of elements.

4. **Return the Result**: Finally, the function returns the list of results.

This approach ensures that the function is both concise and efficient, leveraging Python's built-in functions to perform the required operations.