[BEGIN PROCESS]
Input: m, n: two integers representing the dimensions of the rectangle (m rows and n columns)
Output: count: the total number of squares that can be formed within the rectangle

1: Initialize count to 0
2: For each possible square size s from 1 to the minimum of m and n:
3:     Calculate the number of s x s squares that can fit horizontally as (n - s + 1)
4:     Calculate the number of s x s squares that can fit vertically as (m - s + 1)
5:     Multiply the horizontal and vertical counts to get the total number of s x s squares
6:     Add the total number of s x s squares to count
7: Return count
[END PROCESS]

[BEGIN CODE]
def count_Squares(m, n):
    count = 0
    # Determine the smaller dimension to limit the size of the largest possible square
    min_dim = min(m, n)
    for s in range(1, min_dim + 1):
        # Calculate the number of s x s squares that can fit in the rectangle
        horizontal_fits = n - s + 1
        vertical_fits = m - s + 1
        count += horizontal_fits * vertical_fits
    return count
[END CODE]

### Explanation:
The function `count_Squares(m, n)` calculates the total number of squares that can be formed within a rectangle of dimensions `m` by `n`. The approach is to consider all possible square sizes from 1x1 up to the size of the smaller dimension of the rectangle. For each square size `s`, the function calculates how many such squares can fit horizontally and vertically within the rectangle. The product of these two numbers gives the total number of `s x s` squares that can be formed. This count is then added to the total count of squares. The process is repeated for all possible square sizes, and the final count is returned.