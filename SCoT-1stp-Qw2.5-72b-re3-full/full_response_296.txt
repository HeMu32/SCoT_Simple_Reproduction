[BEGIN PROCESS]
Input: arr: a list of integers, n: the length of the list
Output: inv_count: the number of inversions in the array

1: Initialize inv_count to 0
2: For each element in the array (i from 0 to n-1):
3:     For each subsequent element in the array (j from i+1 to n-1):
4:         If arr[i] is greater than arr[j]:
5:             Increment inv_count by 1
6: Return inv_count
[END PROCESS]

[BEGIN CODE]
def get_Inv_Count(arr, n):
    inv_count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if arr[i] > arr[j]:
                inv_count += 1
    return inv_count
[END CODE]

Explanation:
- The function `get_Inv_Count` takes an array `arr` and its length `n` as input.
- It initializes a counter `inv_count` to 0, which will be used to count the number of inversions.
- The outer loop iterates through each element of the array, starting from the first element.
- The inner loop starts from the element next to the current element of the outer loop and goes to the end of the array.
- Inside the inner loop, it checks if the current element of the outer loop is greater than the current element of the inner loop. If it is, it means there is an inversion, and `inv_count` is incremented.
- After both loops complete, the function returns the total count of inversions found in the array.
- This approach has a time complexity of O(n^2), which is suitable for small to moderately sized arrays. For larger arrays, more efficient algorithms like the modified merge sort can be used to count inversions in O(n log n) time.