[BEGIN PROCESS]
Input: set: a list of integers, n: the number of elements in the set, sum: the target sum
Output: True if there is a subset of set whose sum is equal to sum, False otherwise

1: If the sum is 0, return True (an empty subset can always sum to 0)
2: If n is 0 and sum is not 0, return False (no elements to form the sum)
3: Create a 2D array dp of size (n+1) x (sum+1) to store the subset sum solutions
4: Initialize the first column of dp to True (a sum of 0 can be achieved with an empty subset)
5: Initialize the first row of dp to False (a non-zero sum cannot be achieved with 0 elements)
6: For each element in the set (from 1 to n):
7:     For each possible sum value (from 1 to sum):
8:         If the current element is greater than the current sum value:
9:             Set dp[i][j] to dp[i-1][j] (exclude the current element)
10:        Else:
11:            Set dp[i][j] to dp[i-1][j] or dp[i-1][j-set[i-1]] (include or exclude the current element)
12: Return the value of dp[n][sum]
[END PROCESS]

[BEGIN CODE]
def is_subset_sum(set, n, sum):
    # Base cases
    if sum == 0:
        return True
    if n == 0 and sum != 0:
        return False
    
    # Create a 2D array to store the subset sum solutions
    dp = [[False for x in range(sum+1)] for x in range(n+1)]
    
    # Initialize the first column as True
    for i in range(n+1):
        dp[i][0] = True
    
    # Initialize the first row as False (except dp[0][0])
    for j in range(1, sum+1):
        dp[0][j] = False
    
    # Fill the dp array
    for i in range(1, n+1):
        for j in range(1, sum+1):
            if set[i-1] > j:
                dp[i][j] = dp[i-1][j]
            else:
                dp[i][j] = dp[i-1][j] or dp[i-1][j-set[i-1]]
    
    return dp[n][sum]
[END CODE]

### Explanation:
The function `is_subset_sum` determines whether there exists a subset of the given set `set` that sums up to the given `sum`. The problem is solved using dynamic programming, where a 2D array `dp` is used to store the solutions to subproblems. The value `dp[i][j]` is `True` if there is a subset of the first `i` elements of `set` that sums up to `j`.

- **Base Cases:**
  - If `sum` is 0, the function returns `True` because an empty subset can always sum to 0.
  - If `n` is 0 and `sum` is not 0, the function returns `False` because no elements mean no way to form a non-zero sum.

- **Initialization:**
  - The first column of `dp` is initialized to `True` because a sum of 0 can be achieved with an empty subset.
  - The first row of `dp` is initialized to `False` (except `dp[0][0]`) because a non-zero sum cannot be achieved with 0 elements.

- **Filling the DP Table:**
  - For each element in the set and each possible sum value, the function checks if the current element can be included in the subset that sums to the current sum value. If the current element is greater than the current sum value, it is excluded. Otherwise, the function considers both including and excluding the current element.

- **Result:**
  - The function returns the value of `dp[n][sum]`, which indicates whether there is a subset of the given set that sums up to the given sum.