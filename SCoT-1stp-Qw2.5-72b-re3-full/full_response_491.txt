[BEGIN PROCESS]
Input: a, n, r: real numbers representing the first term, number of terms, and the common ratio of a geometric progression (GP) series, respectively.
Output: sum_gp: the sum of the first n terms of the GP series.

1: Check if the common ratio (r) is 1:
2:     If true, the series is a constant series, and the sum is simply the first term (a) multiplied by the number of terms (n).
3:     Return the sum.
4: If the common ratio (r) is not 1:
5:     Use the formula for the sum of a geometric series: sum = a * (1 - r^n) / (1 - r)
6:     Return the sum.
[END PROCESS]

[BEGIN CODE]
def sum_gp(a, n, r):
    if r == 1:
        # If the common ratio is 1, the series is a constant series.
        return a * n
    else:
        # Use the formula for the sum of a geometric series.
        return a * (1 - r**n) / (1 - r)
[END CODE]

### Explanation:
- **Step 1-3:** If the common ratio `r` is 1, the series is a constant series where each term is equal to the first term `a`. Therefore, the sum of the first `n` terms is simply `a * n`.
- **Step 4-6:** If the common ratio `r` is not 1, we use the formula for the sum of a geometric series, which is `a * (1 - r^n) / (1 - r)`. This formula calculates the sum of the first `n` terms of the series.

This approach ensures that the function handles both cases where the common ratio is 1 and where it is not, providing the correct sum for the geometric progression series.