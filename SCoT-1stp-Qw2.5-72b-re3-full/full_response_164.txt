[BEGIN PROCESS]
Input: num1, num2: two integers
Output: A boolean value indicating whether the sum of divisors of num1 is equal to the sum of divisors of num2

1: Define a helper function `sum_of_divisors` that calculates the sum of divisors of a given number.
2: In the `sum_of_divisors` function:
   a: Initialize a variable `sum_div` to 0 to store the sum of divisors.
   b: Loop through all numbers from 1 to the given number (inclusive).
   c: If the current number is a divisor of the given number, add it to `sum_div`.
   d: Return `sum_div` after the loop.
3: In the `areEquivalent` function:
   a: Calculate the sum of divisors of `num1` using the `sum_of_divisors` function.
   b: Calculate the sum of divisors of `num2` using the `sum_of_divisors` function.
   c: Compare the two sums and return `True` if they are equal, otherwise return `False`.
[END PROCESS]

[BEGIN CODE]
def sum_of_divisors(n):
    sum_div = 0
    for i in range(1, n + 1):
        if n % i == 0:
            sum_div += i
    return sum_div

def areEquivalent(num1, num2):
    sum1 = sum_of_divisors(num1)
    sum2 = sum_of_divisors(num2)
    return sum1 == sum2
[END CODE]

Explanation:
- The `sum_of_divisors` function is a helper function that calculates the sum of all divisors of a given number. It iterates from 1 to the number itself, checking if the current number is a divisor. If it is, it adds the divisor to the sum.
- The `areEquivalent` function uses the `sum_of_divisors` function to get the sum of divisors for both `num1` and `num2`. It then compares these sums and returns `True` if they are equal, indicating that the sums of divisors are the same for both numbers, and `False` otherwise.