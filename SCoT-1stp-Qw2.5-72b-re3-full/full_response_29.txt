[BEGIN PROCESS]
Input: arr: a list of integers, arr_size: the size of the list
Output: The element that occurs an odd number of times in the list

1: Initialize a variable `result` to 0. This will be used to store the XOR of all elements.
2: Loop through each element `num` in the list `arr`:
3:     XOR `num` with `result`. This operation will cancel out the elements occurring an even number of times, leaving the element that occurs an odd number of times.
4: Return `result` as the element occurring an odd number of times.
[END PROCESS]

[BEGIN CODE]
def get_Odd_Occurrence(arr, arr_size):
    result = 0
    for num in arr:
        result ^= num
    return result
[END CODE]

Explanation:
The function `get_Odd_Occurrence` takes a list of integers `arr` and its size `arr_size` as input. The goal is to find the element that occurs an odd number of times in the list. The approach used here leverages the properties of the XOR (^) operation, which has the following characteristics:
- `a ^ a = 0` (any number XORed with itself is 0)
- `a ^ 0 = a` (any number XORed with 0 is the number itself)
- XOR is commutative and associative, meaning the order of operations does not matter.

By XORing all elements in the list, elements that occur an even number of times will cancel each other out, leaving the element that occurs an odd number of times. This method is efficient and works in O(n) time complexity, where n is the number of elements in the list.