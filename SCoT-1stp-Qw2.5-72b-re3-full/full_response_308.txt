[BEGIN PROCESS]
Input: nums1: a list of integers, nums2: a list of integers, N: an integer representing the number of largest products to find
Output: A list of the N largest products that can be formed by multiplying one element from nums1 with one element from nums2

1: Initialize an empty list products to store the products of elements from nums1 and nums2
2: For each element x in nums1:
3:     For each element y in nums2:
4:         Compute the product of x and y
5:         Add the product to the list products
6: Sort the list products in descending order
7: Return the first N elements from the sorted list products
[END PROCESS]

[BEGIN CODE]
def large_product(nums1, nums2, N):
    # Initialize an empty list to store the products
    products = []
    
    # Compute the product of each pair of elements from nums1 and nums2
    for x in nums1:
        for y in nums2:
            products.append(x * y)
    
    # Sort the products in descending order
    products.sort(reverse=True)
    
    # Return the first N elements from the sorted list
    return products[:N]
[END CODE]

### Explanation:
The function `large_product` takes three parameters: `nums1`, `nums2`, and `N`. The goal is to find the `N` largest products that can be formed by multiplying one element from `nums1` with one element from `nums2`.

1. **Initialization**: We start by initializing an empty list `products` to store the products of all possible pairs of elements from `nums1` and `nums2`.

2. **Nested Loops**: We use two nested loops to iterate over each element `x` in `nums1` and each element `y` in `nums2`. For each pair `(x, y)`, we compute the product `x * y` and append it to the `products` list.

3. **Sorting**: After computing all possible products, we sort the `products` list in descending order. This ensures that the largest products are at the beginning of the list.

4. **Return**: Finally, we return the first `N` elements from the sorted `products` list, which are the `N` largest products.

This approach ensures that we efficiently find the required number of largest products by leveraging sorting, which has a time complexity of \(O(m \times n \log(m \times n))\), where \(m\) and \(n\) are the lengths of `nums1` and `nums2`, respectively.