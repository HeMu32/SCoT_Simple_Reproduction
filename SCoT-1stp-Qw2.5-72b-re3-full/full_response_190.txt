[BEGIN PROCESS]
Input: x1, y1, x2, y2: integers representing the coordinates of two opposite corners of a square
Output: count: the number of integral coordinates that lie strictly inside the square

1: Calculate the side length of the square by finding the absolute difference between x1 and x2 (or y1 and y2, since it's a square)
2: Subtract 1 from the side length to exclude the boundary points
3: If the side length is less than or equal to 1, return 0 because there are no points strictly inside the square
4: The number of integral points inside the square is the square of (side length - 1)
5: Return the count
[END PROCESS]

[BEGIN CODE]
def count_Intgral_Points(x1, y1, x2, y2):
    # Calculate the side length of the square
    side_length = abs(x2 - x1)
    
    # If the side length is less than or equal to 1, there are no points strictly inside the square
    if side_length <= 1:
        return 0
    
    # Calculate the number of integral points inside the square
    count = (side_length - 1) ** 2
    
    return count
[END CODE]

### Explanation:
The function `count_Intgral_Points` calculates the number of integral points that lie strictly inside a square defined by two opposite corners (x1, y1) and (x2, y2). The key steps are:

1. **Calculate the Side Length**: The side length of the square is the absolute difference between the x-coordinates (or y-coordinates) of the two given points. Since it's a square, the side length will be the same for both dimensions.

2. **Check for Validity**: If the side length is less than or equal to 1, it means the square is either a point or a line segment, and there are no points strictly inside it. In this case, the function returns 0.

3. **Calculate the Number of Interior Points**: The number of integral points strictly inside the square is given by the formula \((\text{side length} - 1)^2\). This is because each side of the square, excluding the boundary, has \((\text{side length} - 1)\) points, and the total number of points inside the square is the product of these points in both dimensions.

4. **Return the Result**: The function returns the calculated count of interior points.

This approach ensures that the function correctly counts the number of integral points inside the square, excluding the boundary points.