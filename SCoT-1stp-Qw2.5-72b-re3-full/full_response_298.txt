[BEGIN PROCESS]
Input: l1, l2: two lists, where l1 can contain nested lists, and l2 is a flat list.
Output: result: a list of elements from l1 that are also present in l2.

1: Initialize an empty list called `result` to store the common elements.
2: Define a helper function `flatten` to flatten the nested list `l1` into a single list.
3: Loop through each element `e` in the flattened list `l1`:
4:     If `e` is in `l2` and `e` is not already in `result`:
5:         Append `e` to `result`.
6: Return `result`.
[END PROCESS]

[BEGIN CODE]
def intersection_nested_lists(l1, l2):
    def flatten(lst):
        """Flatten a nested list into a single list."""
        flat_list = []
        for item in lst:
            if isinstance(item, list):
                flat_list.extend(flatten(item))
            else:
                flat_list.append(item)
        return flat_list

    result = []
    flat_l1 = flatten(l1)
    for e in flat_l1:
        if e in l2 and e not in result:
            result.append(e)
    return result
[END CODE]

### Explanation:
1. **Flatten Function**: The `flatten` function is a recursive function that takes a nested list and returns a flat list. It checks if an item is a list; if it is, it recursively flattens that list and extends the current flat list with the result. If the item is not a list, it appends the item to the flat list.

2. **Main Function**:
   - **Initialization**: We initialize an empty list `result` to store the common elements.
   - **Flattening**: We call the `flatten` function on `l1` to get a flat list `flat_l1`.
   - **Loop and Check**: We loop through each element `e` in `flat_l1`. For each element, we check if it is in `l2` and not already in `result`. If both conditions are met, we append `e` to `result`.
   - **Return**: Finally, we return the `result` list, which contains the elements from `l1` that are also present in `l2`.

This approach ensures that we correctly handle nested lists and only include unique common elements in the result.