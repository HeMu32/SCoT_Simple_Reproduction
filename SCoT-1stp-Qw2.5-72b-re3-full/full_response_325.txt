[BEGIN PROCESS]
Input: n: an integer representing the target sum
Output: The minimum number of perfect squares that sum up to n

1: Initialize a list `dp` of size `n + 1` with all elements set to infinity, except `dp[0]` which is set to 0 (base case)
2: For each number `i` from 1 to n inclusive:
3:     For each possible square `j * j` where `j * j` is less than or equal to `i`:
4:         Update `dp[i]` to be the minimum of its current value and `dp[i - j * j] + 1`
5: Return `dp[n]` which contains the minimum number of squares that sum up to `n`
[END PROCESS]

[BEGIN CODE]
def get_Min_Squares(n):
    # Initialize the dp array with infinity and set dp[0] to 0
    dp = [float('inf')] * (n + 1)
    dp[0] = 0

    # Fill the dp array
    for i in range(1, n + 1):
        j = 1
        while j * j <= i:
            dp[i] = min(dp[i], dp[i - j * j] + 1)
            j += 1

    return dp[n]
[END CODE]

### Explanation:
The function `get_Min_Squares(n)` is designed to find the minimum number of perfect squares that sum up to a given number `n`. The approach used here is dynamic programming, which is efficient for this type of problem.

1. **Initialization**: We initialize a list `dp` of size `n + 1` where `dp[i]` will store the minimum number of perfect squares that sum up to `i`. We set `dp[0]` to 0 because 0 can be represented by 0 squares.

2. **Filling the DP Table**: We iterate through each number `i` from 1 to `n`. For each `i`, we consider all possible perfect squares `j * j` that are less than or equal to `i`. We update `dp[i]` to be the minimum of its current value and `dp[i - j * j] + 1`. This step ensures that we are considering the minimum number of squares needed to reach `i`.

3. **Result**: After filling the `dp` array, `dp[n]` will contain the minimum number of perfect squares that sum up to `n`.

This approach ensures that we efficiently find the solution with a time complexity of O(n * sqrt(n)), which is suitable for moderate values of `n`.