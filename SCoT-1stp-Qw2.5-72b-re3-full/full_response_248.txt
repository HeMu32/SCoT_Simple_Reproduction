[BEGIN PROCESS]
Input: n: an integer representing the number of terms in the harmonic series to sum up to n-1.
Output: A float representing the harmonic sum of n-1.

1: If n is less than or equal to 1, return 1 as the base case (since the harmonic sum of 0 is 1).
2: Otherwise, return the sum of 1/n and the harmonic sum of n-1.
3: This process is repeated recursively until the base case is reached.
[END PROCESS]

[BEGIN CODE]
def harmonic_sum(n):
    if n <= 1:
        return 1
    else:
        return 1/n + harmonic_sum(n-1)
[END CODE]

### Explanation

The harmonic sum of a number \( n \) is defined as the sum of the reciprocals of the first \( n \) natural numbers. Mathematically, it can be represented as:

\[ H(n) = 1 + \frac{1}{2} + \frac{1}{3} + \cdots + \frac{1}{n} \]

However, the function `harmonic_sum(n)` is designed to calculate the harmonic sum up to \( n-1 \), which means:

\[ H(n-1) = 1 + \frac{1}{2} + \frac{1}{3} + \cdots + \frac{1}{n-1} \]

To achieve this, the function uses recursion:
- **Base Case**: If \( n \) is 1 or less, the function returns 1. This is because the harmonic sum of 0 or 1 is 1.
- **Recursive Case**: For any \( n > 1 \), the function returns the sum of \( \frac{1}{n} \) and the harmonic sum of \( n-1 \).

This recursive approach ensures that the function correctly calculates the harmonic sum by breaking down the problem into smaller subproblems until the base case is reached.