[BEGIN PROCESS]
Input: str1: a string
Output: max_char: the character that occurs the most in the string

1: Initialize an empty dictionary to store the frequency of each character
2: For each character (char) in str1:
3:     If char is not in the dictionary, add it with a count of 1
4:     If char is already in the dictionary, increment its count by 1
5: Initialize max_char to None and max_count to 0
6: For each key (char) and value (count) in the dictionary:
7:     If count is greater than max_count:
8:         Set max_char to char and max_count to count
9: Return max_char
[END PROCESS]

[BEGIN CODE]
def get_max_occuring_char(str1):
    # Initialize a dictionary to store the frequency of each character
    char_frequency = {}
    
    # Loop through each character in the string
    for char in str1:
        # If the character is not in the dictionary, add it with a count of 1
        if char not in char_frequency:
            char_frequency[char] = 1
        # If the character is already in the dictionary, increment its count by 1
        else:
            char_frequency[char] += 1
    
    # Initialize variables to track the character with the maximum frequency
    max_char = None
    max_count = 0
    
    # Loop through the dictionary to find the character with the maximum frequency
    for char, count in char_frequency.items():
        if count > max_count:
            max_char = char
            max_count = count
    
    # Return the character with the maximum frequency
    return max_char
[END CODE]

### Explanation:
The function `get_max_occuring_char` is designed to find the character that occurs the most frequently in a given string `str1`. The process involves the following steps:

1. **Initialization**: An empty dictionary `char_frequency` is created to store the frequency of each character in the string.
2. **Frequency Count**: The function iterates over each character in the string. For each character:
   - If the character is not already in the dictionary, it is added with a count of 1.
   - If the character is already in the dictionary, its count is incremented by 1.
3. **Finding the Maximum**: After populating the dictionary, the function initializes `max_char` to `None` and `max_count` to 0. It then iterates over the dictionary to find the character with the highest count.
4. **Return Result**: The character with the highest frequency is returned.

This approach ensures that the function efficiently finds the most frequent character in the string.